<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- NEXTVAL → 시퀀스를 증가시키고, 새로운 PK번호로 카운트
	 예: payment_seq.NEXTVAL 실행하면 시퀀스가 1 증가하고 그 값을 반환.
	 CURRVAL → 가장 최근에 같은 세션에서 불린 NEXTVAL 값을 회수	-->
	 
<mapper namespace="com.gym.mapper.xml.PaymentMapper">

	<!-- 컬럼 → json값 -->
	<sql id="cols">
		p.payment_id 
		AS paymentId,
		
		p.member_id
		AS memberId,
		
		p.account_id
		AS accountId,
		
		p.card_id 
		AS cardId,
		
		p.resv_id
		AS resvId,
		
		p.payment_money
		AS paymentMoney,
		
		p.payment_method
		AS paymentMethod,
		
		p.payment_status
		AS paymentStatus,
		
		p.payment_date
		AS paymentDate
	</sql>

	<!-- 결제 INSERT -->
	<insert id="insertPayment" parameterType="map">
		INSERT INTO payment_tbl (
			payment_id,
			member_id,
			account_id,
			card_id,
			resv_id,
			payment_money,
			payment_method,
			payment_status
		)
		SELECT
			payment_seq.NEXTVAL, -- [PK값 증가]조건 만족시에만 NEXTVAL(DDL에서 트리거 설정함) 호출 
			m.member_id,
			-- 결제수단 선택 : 계좌/카드 중 선택 
			CASE WHEN #{p.paymentMethod} = '계좌' THEN a.account_id END,
			CASE WHEN #{p.paymentMethod} = '카드' THEN c.card_id END,
			r.resv_id,
			#{p.paymentMoney},
			#{p.paymentMethod},
		 
		NVL(#{p.paymentStatus, jdbcType=VARCHAR}, '예약') -- 파라미터가 NULL일 경우 자동으로 '예약'으로 등록
				
		FROM member_tbl m	-- 회원테이블의 id값 존재 여부 확인
		JOIN reservation_tbl r ON r.resv_id = #{p.resvId} -- 신청테이블의 id값 존재 여부 확인 
		-- 계좌 값이 있으면 매칭, null이면 반환
		LEFT JOIN account_tbl a 
		ON a.account_id = #{p.accountId, jdbcType=NUMERIC}
		-- 카드 값이 있으면 매칭, null이면 반환
		LEFT JOIN card_tbl c 
		ON c.card_id = #{p.cardId, jdbcType=NUMERIC}
		
		WHERE m.member_id = #{p.memberId} -- 회원 테이블의 member_id와 입력값이 일치할 경우
		
		AND (
		(#{p.paymentMethod} = '계좌'					-- 결제수단이 '계좌'인 경우
		AND a.account_id IS NOT NULL				-- 계좌 테이블에 실제로 존재하는 계좌여야 함
		AND #{p.cardId, jdbcType=NUMERIC} IS NULL	-- 동시에 카드ID는 비어 있어야 함
		)
		OR
		(#{p.paymentMethod} = '카드'					-- 결제수단이 '카드'인 경우
		AND c.card_id IS NOT NULL					-- 카드 테이블에 실제로 존재하는 카드여야 함
		AND #{p.accountId, jdbcType=NUMERIC} IS NULL-- 동시에 계좌ID는 비어 있어야 함
		)
		)
	</insert>

	<!-- [PK값 증가] INSERT 직후 같은 세션에서 PK 회수용: payment_seq.CURRVAL 반환  -->
	<select id="getPaymentSeqCurrval" resultType="long">
		SELECT payment_seq.CURRVAL FROM dual
	</select>

	<!-- 결제 목록/검색: 요청 파라미터(req)에 따라 동적 WHERE를 구성 -->
	<select id="selectPayments"
		resultType="com.gym.domain.payment.Payment">
		SELECT
		p.payment_id 
		AS paymentId,
		
		p.member_id
		AS memberId,
		
		p.account_id
		AS accountId,
		
		p.card_id
		AS cardId,
		
		p.resv_id
		AS resvId,
		
		p.payment_money
		AS paymentMoney,
		
		p.payment_method
		AS paymentMethod,
		
		p.payment_status
		AS paymentStatus,
		
		p.payment_date
		AS paymentDate
		
		FROM GYM.payment_tbl p
		<where>
			<if test="req.paymentId != null">
				AND p.payment_id = #{req.paymentId}	<!-- 결제ID 정확히 일치 필터 -->
			</if>
			<if test="req.memberId != null and req.memberId != ''">
				AND p.member_id = #{req.memberId}	<!-- 회원ID 정확히 일치 필터 -->
			</if>
			<if test="req.resvId != null">
				AND p.resv_id = #{req.resvId}		<!-- 예약ID 정확히 일치 필터 -->
			</if>
			<if test="req.method != null and req.method != ''">
				AND p.payment_method = #{req.method}<!-- 결제수단('계좌' 또는 '카드') 필터 -->
			</if>
			<if test="req.paymentStatus != null and req.paymentStatus != ''">
				AND p.payment_status = #{req.paymentStatus}	<!-- 결제상태('예약','완료','취소') 필터 -->
			</if>
		</where>
		ORDER BY p.payment_id DESC					 <!-- 최신 결제ID부터 내림차순 정렬 -->
	</select>



	<!-- 결제 상태 변경: payment_id 기준으로 payment_status 업데이트 -->
	<update id="updatePaymentStatus">
		UPDATE GYM.payment_tbl
		SET payment_status = #{status}	<!-- 변경할 상태값 바인딩('예약'/'완료'/'취소') -->
		WHERE payment_id = #{paymentId}	<!-- 대상 결제ID 지정 -->
	</update>

</mapper>
